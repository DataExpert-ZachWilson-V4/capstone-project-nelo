name: Cleanup

on:
  workflow_dispatch:
    inputs:
      cleanup_action:
        description: 'Choose cleanup action'
        required: true
        default: 'shutdown'
        type: choice
        options:
          - shutdown
          - delete_resources
  schedule:
    - cron: '0 2 * * *'  

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up environment variables
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
        echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> $GITHUB_ENV
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_ENV
        echo "VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=${{ secrets.STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=${{ secrets.RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y azure-cli jq sshpass gnupg software-properties-common curl ca-certificates apt-transport-https lsb-release
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt-get update
        sudo apt-get install -y terraform vault

    - name: Login to Azure CLI
      run: |
        az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
        az account set --subscription "$ARM_SUBSCRIPTION_ID"

    - name: Determine cleanup action
      id: determine-action
      run: echo "CLEANUP_ACTION=${{ github.event.inputs.cleanup_action }}" >> $GITHUB_ENV

    - name: Clean Docker environment
      if: env.CLEANUP_ACTION == 'shutdown' || env.CLEANUP_ACTION == 'delete_resources'
      run: |
        sshpass -p "$ADMIN_PASSWORD" ssh -o StrictHostKeyChecking=no -i terraform-azure-vm-setup/id_rsa azureuser@${{ env.PUBLIC_IP }} << 'EOF'
        #!/bin/bash
        # Stop all running containers
        if [ "$(docker ps -q)" ]; then
          docker stop $(docker ps -q)
        fi
        # Remove all containers
        if [ "$(docker ps -a -q)" ]; then
          docker rm -f $(docker ps -a -q)
        fi
        # Remove all volumes
        if [ "$(docker volume ls -q)" ]; then
          docker volume rm $(docker volume ls -q)
        fi
        # Remove all removable networks
        docker network prune -f
        # Remove all images
        if [ "$(docker images -a -q)" ]; then
          docker rmi -f $(docker images -a -q)
        fi
        # Prune the system
        docker system prune -a --volumes -f
        echo "Docker environment has been cleaned up."
        EOF

    - name: Shutdown VM
      if: env.CLEANUP_ACTION == 'shutdown'
      run: |
        az vm deallocate --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name myVM
        az vm stop --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name myVM

    - name: Delete Resources
      if: env.CLEANUP_ACTION == 'delete_resources'
      run: |
        az group delete --name ${{ env.RESOURCE_GROUP_NAME }} --yes --no-wait

    - name: Delete PostgreSQL server
      if: env.CLEANUP_ACTION == 'delete_resources'
      run: |
        az postgres server delete --name nelomlb-postgres-server --resource-group ${{ env.RESOURCE_GROUP_NAME }} --yes --no-wait

    - name: Destroy remaining Terraform resources
      if: env.CLEANUP_ACTION == 'delete_resources'
      run: |
        terraform init
        terraform destroy -auto-approve

    - name: Optionally delete the resource group
      if: env.CLEANUP_ACTION == 'delete_resources'
      run: |
        az group delete --name ${{ env.RESOURCE_GROUP_NAME }} --yes --no-wait
